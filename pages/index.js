import Loading from "@/components/Loading";
import NftList from "@/components/NftList";
import { options } from "@/utils/constant";
import WalletConnectProvider from "@walletconnect/web3-provider/dist/cjs";
import Head from "next/head";
import { useRef, useState } from "react";
import Web3 from "web3";
import Web3Modal from "web3modal";
let web3Modal;

const providerOptions = {
  walletconnect: {
    package: WalletConnectProvider,
    options: options,
  },
};
if (typeof window !== "undefined") {
  web3Modal = new Web3Modal({
    network: "matic",
    theme: "dark",
    cacheProvider: true,
    providerOptions,
  });
}

export default function Home() {
  const nftListRef = useRef(null);
  const [walletAddress, setWalletAddress] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleConnect = async () => {
    if (window.ethereum) {
      setLoading(true);
      try {
        const web3ModalInstance = await web3Modal.connect();
        const web3 = new Web3(web3ModalInstance);
        const accounts = await web3.eth.getAccounts();
        const walletAccounts = accounts[0];
        if (walletAccounts) {
          setWalletAddress(walletAccounts);
        }
      } catch (error) {
        console.log(error);
      } finally {
        setLoading(false);
      }
    } else {
      alert("Install Metamask extension!!");
      return;
    }
  };

  const handleDisconnect = () => {
    web3Modal.clearCachedProvider();
    if (walletAddress) {
      setWalletAddress(null);
      alert("Disconnect Successfully");
    }
  };

  const getListNft = () => {
    if (walletAddress) {
      nftListRef.current.getNftData(walletAddress);
    }
  };

  return (
    <>
      <Head>
        <title>NextJS Web3 Demo</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-slate-500 h-screen w-full">
        {loading ? (
          <Loading />
        ) : (
          <>
            <div className="container m-auto flex flex-col justify-center items-center h-full gap-5">
              <div>
                {walletAddress && (
                  <div className="text-lg font-medium border p-3 rounded-md text-center text-white w-fit m-auto">
                    <h2 className="">Your Address:</h2>
                    <p className="">{walletAddress}</p>
                  </div>
                )}

                <div className="flex gap-5 justify-center items-center my-5">
                  {!walletAddress && (
                    <button
                      className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-4 px-5 rounded-full text-lg"
                      onClick={handleConnect}
                    >
                      Connect to Wallet
                    </button>
                  )}
                  {walletAddress && (
                    <>
                      <button
                        className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold  py-4 px-5 rounded-full text-lg shadow-lg"
                        onClick={handleDisconnect}
                      >
                        Disconnect
                      </button>
                      <button
                        className="bg-[conic-gradient(at_top_left,_var(--tw-gradient-stops))] from-blue-500 to-blue-600 hover:opacity-90 hover:border-[#95a5a6] transition-all duration-300 py-4 px-5 rounded-full text-lg shadow-lg text-white border border-blue-500"
                        onClick={getListNft}
                      >
                        Get List NFT
                      </button>
                    </>
                  )}
                </div>
                <NftList ref={nftListRef} walletAddress={walletAddress} />
              </div>
            </div>
          </>
        )}
      </main>
    </>
  );
}
